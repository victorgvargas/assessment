{"ast":null,"code":"import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nconst noop = () => {};\n\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    const stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n      const blocksOfHundredsCopy = [...blocksOfHundreds];\n\n      for (const [index, block] of blocksOfHundreds.entries()) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n        finalNumber.push(SUFFIXES.HUNDRED + \" and \");\n\n        if (parseInt(block[1]) !== 0) {\n          const dicker = block[1] + block[2];\n\n          if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n            finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n          } else {\n            const dickerPrefix = block[1] + \"0\";\n            finalNumber.push(`${NUMBERS_STRINGS[dickerPrefix]} ${NUMBERS_STRINGS[parseInt(block[2])]}`);\n          }\n        }\n\n        if (index !== blocksOfHundreds.length - 1) {\n          switch (blocksOfHundredsCopy.length) {\n            case 2:\n              finalNumber.push(` ${SUFFIXES.THOUSAND} `);\n              break;\n\n            case 3:\n              finalNumber.push(` ${SUFFIXES.MILLION} `);\n              break;\n\n            case 4:\n              finalNumber.push(` ${SUFFIXES.BILLION} `);\n              break;\n\n            case 5:\n              finalNumber.push(` ${SUFFIXES.TRILLION} `);\n              break;\n\n            default:\n              noop();\n          }\n\n          blocksOfHundredsCopy.pop();\n          finalNumber.push(\" and \");\n        }\n      }\n    }\n\n    return finalNumber;\n  }\n}","map":{"version":3,"sources":["/home/victor/Documents/React/assessment/js-numerals/src/hooks/useConvert.js"],"names":["NUMBERS_STRINGS","SUFFIXES","noop","useConvert","number","hasOwnProperty","stringifiedNumber","toString","finalNumber","length","blocksOfHundreds","match","blocksOfHundredsCopy","index","block","entries","push","parseInt","HUNDRED","dicker","dickerPrefix","THOUSAND","MILLION","BILLION","TRILLION","pop"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,cAA1C;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,MAAIA,MAAJ,EAAY;AACV,QAAIJ,eAAe,CAACK,cAAhB,CAA+BD,MAA/B,CAAJ,EAA4C;AAC1C,aAAOJ,eAAe,CAACI,MAAD,CAAtB;AACD;;AAED,UAAME,iBAAiB,GAAGF,MAAM,CAACG,QAAP,EAA1B;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,QAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA3B,KAAiC,CAArC,EAAwC;AACtC,YAAMC,gBAAgB,GAAGJ,iBAAiB,CAACK,KAAlB,CAAwB,SAAxB,CAAzB;AACA,YAAMC,oBAAoB,GAAG,CAAC,GAAGF,gBAAJ,CAA7B;;AAEA,WAAK,MAAM,CAACG,KAAD,EAAQC,KAAR,CAAX,IAA6BJ,gBAAgB,CAACK,OAAjB,EAA7B,EAAyD;AACvDP,QAAAA,WAAW,CAACQ,IAAZ,CAAiBhB,eAAe,CAACiB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAT,CAAf,GAAsC,GAAvD;AACAN,QAAAA,WAAW,CAACQ,IAAZ,CAAiBf,QAAQ,CAACiB,OAAT,GAAmB,OAApC;;AAEA,YAAID,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,KAAuB,CAA3B,EAA8B;AAC5B,gBAAMK,MAAM,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA/B;;AACA,cAAId,eAAe,CAACK,cAAhB,CAA+BY,QAAQ,CAACE,MAAD,CAAvC,CAAJ,EAAsD;AACpDX,YAAAA,WAAW,CAACQ,IAAZ,CAAiBhB,eAAe,CAACiB,QAAQ,CAACE,MAAD,CAAT,CAAhC;AACD,WAFD,MAEO;AACL,kBAAMC,YAAY,GAAGN,KAAK,CAAC,CAAD,CAAL,GAAW,GAAhC;AACAN,YAAAA,WAAW,CAACQ,IAAZ,CACG,GAAEhB,eAAe,CAACoB,YAAD,CAAe,IAC/BpB,eAAe,CAACiB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAT,CAChB,EAHH;AAKD;AACF;;AAED,YAAID,KAAK,KAAKH,gBAAgB,CAACD,MAAjB,GAA0B,CAAxC,EAA2C;AACzC,kBAAQG,oBAAoB,CAACH,MAA7B;AACE,iBAAK,CAAL;AACED,cAAAA,WAAW,CAACQ,IAAZ,CAAkB,IAAGf,QAAQ,CAACoB,QAAS,GAAvC;AACA;;AACF,iBAAK,CAAL;AACEb,cAAAA,WAAW,CAACQ,IAAZ,CAAkB,IAAGf,QAAQ,CAACqB,OAAQ,GAAtC;AACA;;AACF,iBAAK,CAAL;AACEd,cAAAA,WAAW,CAACQ,IAAZ,CAAkB,IAAGf,QAAQ,CAACsB,OAAQ,GAAtC;AACA;;AACF,iBAAK,CAAL;AACEf,cAAAA,WAAW,CAACQ,IAAZ,CAAkB,IAAGf,QAAQ,CAACuB,QAAS,GAAvC;AACA;;AACF;AACEtB,cAAAA,IAAI;AAdR;;AAgBAU,UAAAA,oBAAoB,CAACa,GAArB;AACAjB,UAAAA,WAAW,CAACQ,IAAZ,CAAiB,OAAjB;AACD;AACF;AACF;;AAED,WAAOR,WAAP;AACD;AACF","sourcesContent":["import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nconst noop = () => {};\n\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    const stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n      const blocksOfHundredsCopy = [...blocksOfHundreds];\n\n      for (const [index, block] of blocksOfHundreds.entries()) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n        finalNumber.push(SUFFIXES.HUNDRED + \" and \");\n\n        if (parseInt(block[1]) !== 0) {\n          const dicker = block[1] + block[2];\n          if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n            finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n          } else {\n            const dickerPrefix = block[1] + \"0\";\n            finalNumber.push(\n              `${NUMBERS_STRINGS[dickerPrefix]} ${\n                NUMBERS_STRINGS[parseInt(block[2])]\n              }`\n            );\n          }\n        }\n\n        if (index !== blocksOfHundreds.length - 1) {\n          switch (blocksOfHundredsCopy.length) {\n            case 2:\n              finalNumber.push(` ${SUFFIXES.THOUSAND} `);\n              break;\n            case 3:\n              finalNumber.push(` ${SUFFIXES.MILLION} `);\n              break;\n            case 4:\n              finalNumber.push(` ${SUFFIXES.BILLION} `);\n              break;\n            case 5:\n              finalNumber.push(` ${SUFFIXES.TRILLION} `);\n              break;\n            default:\n              noop();\n          }\n          blocksOfHundredsCopy.pop();\n          finalNumber.push(\" and \");\n        }\n      }\n    }\n\n    return finalNumber;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\nexport default function useConvert(number) {\n  if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n    return NUMBERS_STRINGS[number];\n  }\n\n  const stringifiedNumber = number.toString();\n  const finalNumber = [];\n\n  if (stringifiedNumber.length % 3 === 0) {\n    const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n\n    for (const block of blocksOfHundreds) {\n      finalNumber.push(parseInt(block[0]));\n      finalNumber.push(SUFFIXES.THOUSAND);\n\n      if (block[1] !== 0) {\n        const dicker = block[1] + block[2];\n        NUMBERS_STRINGS.hasOwnProperty(dicker) ? finalNumber.push(dicker) : finalNumber.push(NUMBERS_STRINGS[block[1]] + NUMBERS_STRINGS[block[2]]);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/victor/Documents/React/assessment/js-numerals/src/hooks/useConvert.js"],"names":["NUMBERS_STRINGS","SUFFIXES","useConvert","number","hasOwnProperty","stringifiedNumber","toString","finalNumber","length","blocksOfHundreds","match","block","push","parseInt","THOUSAND","dicker"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,cAA1C;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,MAAIH,eAAe,CAACI,cAAhB,CAA+BD,MAA/B,CAAJ,EAA4C;AAC1C,WAAOH,eAAe,CAACG,MAAD,CAAtB;AACD;;AAED,QAAME,iBAAiB,GAAGF,MAAM,CAACG,QAAP,EAA1B;AACA,QAAMC,WAAW,GAAG,EAApB;;AAEA,MAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA3B,KAAiC,CAArC,EAAwC;AACtC,UAAMC,gBAAgB,GAAGJ,iBAAiB,CAACK,KAAlB,CAAwB,SAAxB,CAAzB;;AACA,SAAK,MAAMC,KAAX,IAAoBF,gBAApB,EAAsC;AACpCF,MAAAA,WAAW,CAACK,IAAZ,CAAiBC,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,CAAzB;AACAJ,MAAAA,WAAW,CAACK,IAAZ,CAAiBX,QAAQ,CAACa,QAA1B;;AACA,UAAIH,KAAK,CAAC,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAClB,cAAMI,MAAM,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA/B;AACAX,QAAAA,eAAe,CAACI,cAAhB,CAA+BW,MAA/B,IACIR,WAAW,CAACK,IAAZ,CAAiBG,MAAjB,CADJ,GAEIR,WAAW,CAACK,IAAZ,CACEZ,eAAe,CAACW,KAAK,CAAC,CAAD,CAAN,CAAf,GAA4BX,eAAe,CAACW,KAAK,CAAC,CAAD,CAAN,CAD7C,CAFJ;AAKD;AACF;AACF;AACF","sourcesContent":["import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nexport default function useConvert(number) {\n  if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n    return NUMBERS_STRINGS[number];\n  }\n\n  const stringifiedNumber = number.toString();\n  const finalNumber = [];\n\n  if (stringifiedNumber.length % 3 === 0) {\n    const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n    for (const block of blocksOfHundreds) {\n      finalNumber.push(parseInt(block[0]));\n      finalNumber.push(SUFFIXES.THOUSAND);\n      if (block[1] !== 0) {\n        const dicker = block[1] + block[2];\n        NUMBERS_STRINGS.hasOwnProperty(dicker)\n          ? finalNumber.push(dicker)\n          : finalNumber.push(\n              NUMBERS_STRINGS[block[1]] + NUMBERS_STRINGS[block[2]]\n            );\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    const stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n\n      for (const block of blocksOfHundreds) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n        finalNumber.push(SUFFIXES.HUNDRED + \" \");\n\n        if (parseInt(block[1]) !== 0) {\n          const dicker = block[1] + block[2];\n\n          if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n            finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n          } else {\n            const dickerPrefix = block[1] + \"0\";\n            finalNumber.push(NUMBERS_STRINGS[parseInt(dickerPrefix + \" \" + block[2])]);\n          }\n        }\n      }\n    }\n\n    return finalNumber;\n  }\n}","map":{"version":3,"sources":["/home/victor/Documents/React/assessment/js-numerals/src/hooks/useConvert.js"],"names":["NUMBERS_STRINGS","SUFFIXES","useConvert","number","hasOwnProperty","stringifiedNumber","toString","finalNumber","length","blocksOfHundreds","match","block","push","parseInt","HUNDRED","dicker","dickerPrefix"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,cAA1C;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,MAAIA,MAAJ,EAAY;AACV,QAAIH,eAAe,CAACI,cAAhB,CAA+BD,MAA/B,CAAJ,EAA4C;AAC1C,aAAOH,eAAe,CAACG,MAAD,CAAtB;AACD;;AAED,UAAME,iBAAiB,GAAGF,MAAM,CAACG,QAAP,EAA1B;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,QAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA3B,KAAiC,CAArC,EAAwC;AACtC,YAAMC,gBAAgB,GAAGJ,iBAAiB,CAACK,KAAlB,CAAwB,SAAxB,CAAzB;;AACA,WAAK,MAAMC,KAAX,IAAoBF,gBAApB,EAAsC;AACpCF,QAAAA,WAAW,CAACK,IAAZ,CAAiBZ,eAAe,CAACa,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,CAAT,CAAf,GAAsC,GAAvD;AACAJ,QAAAA,WAAW,CAACK,IAAZ,CAAiBX,QAAQ,CAACa,OAAT,GAAmB,GAApC;;AACA,YAAID,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,CAAR,KAAuB,CAA3B,EAA8B;AAC5B,gBAAMI,MAAM,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA/B;;AACA,cAAIX,eAAe,CAACI,cAAhB,CAA+BS,QAAQ,CAACE,MAAD,CAAvC,CAAJ,EAAsD;AACpDR,YAAAA,WAAW,CAACK,IAAZ,CAAiBZ,eAAe,CAACa,QAAQ,CAACE,MAAD,CAAT,CAAhC;AACD,WAFD,MAEO;AACL,kBAAMC,YAAY,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAW,GAAhC;AACAJ,YAAAA,WAAW,CAACK,IAAZ,CACEZ,eAAe,CAACa,QAAQ,CAACG,YAAY,GAAG,GAAf,GAAqBL,KAAK,CAAC,CAAD,CAA3B,CAAT,CADjB;AAGD;AACF;AACF;AACF;;AAED,WAAOJ,WAAP;AACD;AACF","sourcesContent":["import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    const stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n      for (const block of blocksOfHundreds) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n        finalNumber.push(SUFFIXES.HUNDRED + \" \");\n        if (parseInt(block[1]) !== 0) {\n          const dicker = block[1] + block[2];\n          if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n            finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n          } else {\n            const dickerPrefix = block[1] + \"0\";\n            finalNumber.push(\n              NUMBERS_STRINGS[parseInt(dickerPrefix + \" \" + block[2])]\n            );\n          }\n        }\n      }\n    }\n\n    return finalNumber;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
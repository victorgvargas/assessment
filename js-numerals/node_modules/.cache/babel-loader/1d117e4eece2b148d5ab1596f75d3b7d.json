{"ast":null,"code":"import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nconst noop = () => {};\n\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    let stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      divideInBlocks(stringifiedNumber, finalNumber);\n    } else {\n      stringifiedNumber = `0${stringifiedNumber}`;\n      divideInBlocks(stringifiedNumber, finalNumber);\n    }\n\n    return finalNumber;\n  }\n}\n\nfunction divideInBlocks(stringifiedNumber, finalNumber) {\n  const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n  const blocksOfHundredsCopy = [...blocksOfHundreds];\n\n  for (const [index, block] of blocksOfHundreds.entries()) {\n    finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n    finalNumber.push(SUFFIXES.HUNDRED + \" \");\n\n    if (parseInt(block[1]) !== 0) {\n      const dicker = block[1] + block[2];\n\n      if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n      } else {\n        const dickerPrefix = block[1] + \"0\";\n        finalNumber.push(`${NUMBERS_STRINGS[dickerPrefix]} ${NUMBERS_STRINGS[parseInt(block[2])]}`);\n      }\n    }\n\n    if (index !== blocksOfHundreds.length - 1) {\n      switch (blocksOfHundredsCopy.length) {\n        case 2:\n          finalNumber.push(` ${SUFFIXES.THOUSAND} `);\n          break;\n\n        case 3:\n          finalNumber.push(` ${SUFFIXES.MILLION} `);\n          break;\n\n        case 4:\n          finalNumber.push(` ${SUFFIXES.BILLION} `);\n          break;\n\n        case 5:\n          finalNumber.push(` ${SUFFIXES.TRILLION} `);\n          break;\n\n        default:\n          noop();\n      }\n\n      blocksOfHundredsCopy.pop();\n    }\n  }\n\n  return finalNumber;\n}","map":{"version":3,"sources":["/home/victor/Documents/React/assessment/js-numerals/src/hooks/useConvert.js"],"names":["NUMBERS_STRINGS","SUFFIXES","noop","useConvert","number","hasOwnProperty","stringifiedNumber","toString","finalNumber","length","divideInBlocks","blocksOfHundreds","match","blocksOfHundredsCopy","index","block","entries","push","parseInt","HUNDRED","dicker","dickerPrefix","THOUSAND","MILLION","BILLION","TRILLION","pop"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,cAA1C;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,MAAIA,MAAJ,EAAY;AACV,QAAIJ,eAAe,CAACK,cAAhB,CAA+BD,MAA/B,CAAJ,EAA4C;AAC1C,aAAOJ,eAAe,CAACI,MAAD,CAAtB;AACD;;AAED,QAAIE,iBAAiB,GAAGF,MAAM,CAACG,QAAP,EAAxB;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,QAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA3B,KAAiC,CAArC,EAAwC;AACtCC,MAAAA,cAAc,CAACJ,iBAAD,EAAoBE,WAApB,CAAd;AACD,KAFD,MAEO;AACLF,MAAAA,iBAAiB,GAAI,IAAGA,iBAAkB,EAA1C;AACAI,MAAAA,cAAc,CAACJ,iBAAD,EAAoBE,WAApB,CAAd;AACD;;AAED,WAAOA,WAAP;AACD;AACF;;AAED,SAASE,cAAT,CAAwBJ,iBAAxB,EAA2CE,WAA3C,EAAwD;AACtD,QAAMG,gBAAgB,GAAGL,iBAAiB,CAACM,KAAlB,CAAwB,SAAxB,CAAzB;AACA,QAAMC,oBAAoB,GAAG,CAAC,GAAGF,gBAAJ,CAA7B;;AAEA,OAAK,MAAM,CAACG,KAAD,EAAQC,KAAR,CAAX,IAA6BJ,gBAAgB,CAACK,OAAjB,EAA7B,EAAyD;AACvDR,IAAAA,WAAW,CAACS,IAAZ,CAAiBjB,eAAe,CAACkB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAT,CAAf,GAAsC,GAAvD;AACAP,IAAAA,WAAW,CAACS,IAAZ,CAAiBhB,QAAQ,CAACkB,OAAT,GAAmB,GAApC;;AAEA,QAAID,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,KAAuB,CAA3B,EAA8B;AAC5B,YAAMK,MAAM,GAAGL,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAA/B;;AACA,UAAIf,eAAe,CAACK,cAAhB,CAA+Ba,QAAQ,CAACE,MAAD,CAAvC,CAAJ,EAAsD;AACpDZ,QAAAA,WAAW,CAACS,IAAZ,CAAiBjB,eAAe,CAACkB,QAAQ,CAACE,MAAD,CAAT,CAAhC;AACD,OAFD,MAEO;AACL,cAAMC,YAAY,GAAGN,KAAK,CAAC,CAAD,CAAL,GAAW,GAAhC;AACAP,QAAAA,WAAW,CAACS,IAAZ,CACG,GAAEjB,eAAe,CAACqB,YAAD,CAAe,IAC/BrB,eAAe,CAACkB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAT,CAChB,EAHH;AAKD;AACF;;AAED,QAAID,KAAK,KAAKH,gBAAgB,CAACF,MAAjB,GAA0B,CAAxC,EAA2C;AACzC,cAAQI,oBAAoB,CAACJ,MAA7B;AACE,aAAK,CAAL;AACED,UAAAA,WAAW,CAACS,IAAZ,CAAkB,IAAGhB,QAAQ,CAACqB,QAAS,GAAvC;AACA;;AACF,aAAK,CAAL;AACEd,UAAAA,WAAW,CAACS,IAAZ,CAAkB,IAAGhB,QAAQ,CAACsB,OAAQ,GAAtC;AACA;;AACF,aAAK,CAAL;AACEf,UAAAA,WAAW,CAACS,IAAZ,CAAkB,IAAGhB,QAAQ,CAACuB,OAAQ,GAAtC;AACA;;AACF,aAAK,CAAL;AACEhB,UAAAA,WAAW,CAACS,IAAZ,CAAkB,IAAGhB,QAAQ,CAACwB,QAAS,GAAvC;AACA;;AACF;AACEvB,UAAAA,IAAI;AAdR;;AAgBAW,MAAAA,oBAAoB,CAACa,GAArB;AACD;AACF;;AAED,SAAOlB,WAAP;AACD","sourcesContent":["import { NUMBERS_STRINGS, SUFFIXES } from \"../constants\";\n\nconst noop = () => {};\n\nexport default function useConvert(number) {\n  if (number) {\n    if (NUMBERS_STRINGS.hasOwnProperty(number)) {\n      return NUMBERS_STRINGS[number];\n    }\n\n    let stringifiedNumber = number.toString();\n    const finalNumber = [];\n\n    if (stringifiedNumber.length % 3 === 0) {\n      divideInBlocks(stringifiedNumber, finalNumber);\n    } else {\n      stringifiedNumber = `0${stringifiedNumber}`;\n      divideInBlocks(stringifiedNumber, finalNumber);\n    }\n\n    return finalNumber;\n  }\n}\n\nfunction divideInBlocks(stringifiedNumber, finalNumber) {\n  const blocksOfHundreds = stringifiedNumber.match(/.{1,3}/g);\n  const blocksOfHundredsCopy = [...blocksOfHundreds];\n\n  for (const [index, block] of blocksOfHundreds.entries()) {\n    finalNumber.push(NUMBERS_STRINGS[parseInt(block[0])] + \" \");\n    finalNumber.push(SUFFIXES.HUNDRED + \" \");\n\n    if (parseInt(block[1]) !== 0) {\n      const dicker = block[1] + block[2];\n      if (NUMBERS_STRINGS.hasOwnProperty(parseInt(dicker))) {\n        finalNumber.push(NUMBERS_STRINGS[parseInt(dicker)]);\n      } else {\n        const dickerPrefix = block[1] + \"0\";\n        finalNumber.push(\n          `${NUMBERS_STRINGS[dickerPrefix]} ${\n            NUMBERS_STRINGS[parseInt(block[2])]\n          }`\n        );\n      }\n    }\n\n    if (index !== blocksOfHundreds.length - 1) {\n      switch (blocksOfHundredsCopy.length) {\n        case 2:\n          finalNumber.push(` ${SUFFIXES.THOUSAND} `);\n          break;\n        case 3:\n          finalNumber.push(` ${SUFFIXES.MILLION} `);\n          break;\n        case 4:\n          finalNumber.push(` ${SUFFIXES.BILLION} `);\n          break;\n        case 5:\n          finalNumber.push(` ${SUFFIXES.TRILLION} `);\n          break;\n        default:\n          noop();\n      }\n      blocksOfHundredsCopy.pop();\n    }\n  }\n\n  return finalNumber;\n}\n"]},"metadata":{},"sourceType":"module"}